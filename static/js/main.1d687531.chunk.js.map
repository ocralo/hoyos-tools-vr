{"version":3,"sources":["Components/Unity/UnityView.js","Views/Home/Home.js","Views/Token/Token.js","App.js","serviceWorker.js","index.js"],"names":["unityContent","UnityContent","process","UnityView","useState","progressUnity","setProgressUnity","stateUnity","setStateUnity","useEffect","tokenLocalStorage","localStorage","getItem","send","sendToken","on","progression","Math","round","className","style","height","role","width","aria-valuenow","aria-valuemin","aria-valuemax","Home","to","id","pathname","target","src","alt","href","Token","token","useParams","history","useHistory","setItem","push","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mRAGMA,EAAe,IAAIC,eACvBC,gCACAA,+BAGa,SAASC,IAAa,IAAD,EACQC,mBAAS,GADjB,mBAC3BC,EAD2B,KACZC,EADY,OAEEF,oBAAS,GAFX,mBAE3BG,EAF2B,KAEfC,EAFe,KAyBlC,OAhBAC,qBAAU,WACJF,GANY,WAChB,IAAMG,EAAoBC,aAAaC,QAAQ,SAC/CZ,EAAaa,KAAK,cAAe,WAAYH,GAK3CI,KAED,CAACP,IAEJP,EAAae,GAAG,UAAU,WAExBP,GAAc,MAGhBR,EAAae,GAAG,YAAY,SAACC,GAG3BV,EAAiBW,KAAKC,MAAoB,IAAdF,OAG5B,yBAAKG,UAAU,8BACb,yBACEA,UAAU,YACVC,MAAO,CACLC,OAAQ,SAGV,kBAAC,IAAD,CAAOrB,aAAcA,KAEvB,yBAAKmB,UAAU,aACZd,GAAiB,IAChB,GAEA,yBAAKc,UAAU,iBACb,yBACEA,UAAU,yBACVG,KAAK,cACLF,MAAO,CAAEG,MAAM,GAAD,OAAKlB,EAAL,MACdmB,gBAAenB,EACfoB,gBAAc,IACdC,gBAAc,OANhB,UAOKrB,EAPL,SC5CG,SAASsB,IACtB,OACE,oCACE,yBAAKR,UAAU,0DACb,kBAAC,IAAD,CAAMA,UAAU,eAAeS,GAAG,KAAlC,wBAGA,yBAAKT,UAAU,2BAA2BU,GAAG,uBAC3C,wBAAIV,UAAU,mCACZ,wBAAIA,UAAU,mBACZ,kBAAC,IAAD,CACEA,UAAU,WAEVS,GAAI,CACFE,SAAU,6CAEZC,OAAO,UANT,sBAcR,yBAAKZ,UAAU,wBACb,kBAAChB,EAAD,MACA,6BACA,8BAEF,4BAAQgB,UAAU,gCAChB,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,kBACb,wBAAIA,UAAU,cAAd,oBAGJ,yBAAKA,UAAU,OACb,yBAAKA,UAAU,sCACb,yBACEa,IAAG,UAAK9B,IAAL,yBACH+B,IAAI,GACJV,MAAM,SAGV,yBAAKJ,UAAU,sCACb,yBACEa,IAAG,UAAK9B,IAAL,oBACH+B,IAAI,GACJV,MAAM,UAIZ,yBAAKJ,UAAU,OACb,yBAAKA,UAAU,gBAGnB,yBAAKA,UAAU,gDAAf,uBAEE,uBAAGe,KAAK,0BAAR,qBC3DK,SAASC,IAAS,IACzBC,EAAUC,cAAVD,MACFE,EAAUC,cAKd,OAJA9B,qBAAU,WACRE,aAAa6B,QAAQ,QAASJ,GAC9BE,EAAQG,KAAR,OACC,CAACH,EAASF,IAEX,6BACE,gDCSSM,MAjBf,WACE,OACE,kBAAC,IAAD,KAGE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAACjB,EAAD,OAEF,kBAAC,IAAD,CAAOiB,KAAK,WACV,kBAACT,EAAD,UCFUU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1d687531.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Unity, { UnityContent } from \"react-unity-webgl\";\n\nconst unityContent = new UnityContent(\n  process.env.PUBLIC_URL + \"/Aplication/Build Final.json\",\n  process.env.PUBLIC_URL + \"/Aplication/UnityLoader.js\"\n);\n\nexport default function UnityView() {\n  const [progressUnity, setProgressUnity] = useState(0);\n  const [stateUnity, setStateUnity] = useState(false);\n\n  const sendToken = () => {\n    const tokenLocalStorage = localStorage.getItem(\"hotok\");\n    unityContent.send(\"TourManager\", \"setToken\", tokenLocalStorage);\n  };\n\n  useEffect(() => {\n    if (stateUnity) {\n      sendToken();\n    }\n  }, [stateUnity]);\n\n  unityContent.on(\"loaded\", () => {\n    // Now we can for example hide the loading overlay.\n    setStateUnity(true);\n  });\n\n  unityContent.on(\"progress\", (progression) => {\n    // Now we can use the progression to for example\n    // display it on our React app.\n    setProgressUnity(Math.round(progression * 100));\n  });\n  return (\n    <div className=\"row justify-content-center\">\n      <div\n        className=\"col-md-10\"\n        style={{\n          height: \"42em\",\n        }}\n      >\n        <Unity unityContent={unityContent} />\n      </div>\n      <div className=\"col-md-10\">\n        {progressUnity >= 100 ? (\n          \"\"\n        ) : (\n          <div className=\"progress mt-2\">\n            <div\n              className=\"progress-bar bg-danger\"\n              role=\"progressbar\"\n              style={{ width: `${progressUnity}%` }}\n              aria-valuenow={progressUnity}\n              aria-valuemin=\"0\"\n              aria-valuemax=\"100\"\n            >{`${progressUnity}%`}</div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport UnityView from \"../../Components/Unity/UnityView\";\nimport { Link } from \"react-router-dom\";\n\nexport default function Home() {\n  return (\n    <>\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark sticky-top\">\n        <Link className=\"navbar-brand\" to=\"/\">\n          Virtual Reality Shop\n        </Link>\n        <div className=\"collapse navbar-collapse\" id=\"navbarTogglerDemo03\">\n          <ul className=\"navbar-nav ml-auto mt-2 mt-lg-0\">\n            <li className=\"nav-item active\">\n              <Link\n                className=\"nav-link\"\n                //onClick={() => window.location.replace}\n                to={{\n                  pathname: \"http://ferreteriaonlinehoyostools.co/b2b/\",\n                }}\n                target=\"_blank\"\n              >\n                Pagina Inicial\n              </Link>\n            </li>\n          </ul>\n        </div>\n      </nav>\n      <div className=\"container-fluid my-5\">\n        <UnityView />\n        <br />\n        <br />\n      </div>\n      <footer className=\"container-fluid bg-dark mt-5\">\n        <div className=\"container mt-4\">\n          <div className=\"row p-2\">\n            <div className=\"col-md-12 mt-4\">\n              <h3 className=\"text-white\">Realizado por:</h3>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-md-6 d-flex align-items-center\">\n              <img\n                src={`${process.env.PUBLIC_URL}/img/logo_kaleido.png`}\n                alt=\"\"\n                width=\"200\"\n              />\n            </div>\n            <div className=\"col-md-6 d-flex align-items-center\">\n              <img\n                src={`${process.env.PUBLIC_URL}/img/logo_ht.png`}\n                alt=\"\"\n                width=\"200\"\n              />\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-md-12\"></div>\n          </div>\n        </div>\n        <div className=\"footer-copyright text-center py-3 text-white\">\n          Â© 2020 Copyright:\n          <a href=\"https://kaleidolab.co/\"> kaleidolab.co</a>\n        </div>\n      </footer>\n    </>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\n\nexport default function Token() {\n  let { token } = useParams();\n  let history = useHistory();\n  useEffect(() => {\n    localStorage.setItem(\"hotok\", token);\n    history.push(`/`);\n  }, [history, token]);\n  return (\n    <div>\n      <h1>Redireccionando</h1>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Home from \"./Views/Home/Home\";\nimport Token from \"./Views/Token/Token.js\";\nfunction App() {\n  return (\n    <Router>\n      {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n      <Switch>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n        <Route path=\"/:token\">\n          <Token />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}